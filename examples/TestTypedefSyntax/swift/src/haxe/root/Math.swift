// Generated by Haxe 3.3.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={})
public class Math
{
	public static Double PI
	
	public static Double get_PI()
	{
		return Double.pi
	}
	
	
	public static Double NaN
	
	public static Double get_NaN()
	{
		return Double.nan
	}
	
	
	public static Double NEGATIVE_INFINITY
	
	public static Double get_NEGATIVE_INFINITY()
	{
		return -Float.infinity
	}
	
	
	public static Double POSITIVE_INFINITY
	
	public static Double get_POSITIVE_INFINITY()
	{
		return Float.infinity
	}
	
	
	public static Double abs(Double v)
	{
		return Swift.abs(v)
	}
	
	
	public static Double min(Double a, Double b)
	{
		return Swift.min(a, b)
	}
	
	
	public static Double max(Double a, Double b)
	{
		return Swift.max(a, b)
	}
	
	
	public static Double sin(Double v)
	{
		return sin(v)
	}
	
	
	public static Double cos(Double v)
	{
		return cos(v)
	}
	
	
	public static Double atan2(Double y, Double x)
	{
		return atan2(y, x)
	}
	
	
	public static Double tan(Double v)
	{
		return tan(v)
	}
	
	
	public static Double exp(Double v)
	{
		return exp(v)
	}
	
	
	public static Double log(Double v)
	{
		return log(v)
	}
	
	
	public static Double sqrt(Double v)
	{
		return sqrt(v)
	}
	
	
	public static Int round(Double v)
	{
		return Int(round(v))
	}
	
	
	public static Int floor(Double v)
	{
		return Int(floor(v))
	}
	
	
	public static Int ceil(Double v)
	{
		return Int(ceil(v))
	}
	
	
	public static Double atan(Double v)
	{
		return atan(v)
	}
	
	
	public static Double fround(Double v)
	{
		return round(v)
	}
	
	
	public static Double ffloor(Double v)
	{
		return floor(v)
	}
	
	
	public static Double fceil(Double v)
	{
		return ceil(v)
	}
	
	
	public static Double asin(Double v)
	{
		return asin(v)
	}
	
	
	public static Double acos(Double v)
	{
		return acos(v)
	}
	
	
	public static Double pow(Double v, Double exp)
	{
		return pow(v, exp)
	}
	
	
	public static Double random()
	{
		return (Float(random()) / Float(Int32.max))
	}
	
	
	public static Bool isFinite(Double f)
	{
		return f.isFinite
	}
	
	
	public static Bool isNaN(Double f)
	{
		return f.isNan
	}
	
	
}


