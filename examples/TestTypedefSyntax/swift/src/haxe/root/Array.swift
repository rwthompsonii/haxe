// Generated by Haxe 3.3.0
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={})
public final class Array<T>
{
	
	init(_native : [T])
	{
		self.__a = _native;
		self.length = _native.count;
	}
	public Array()
	{
		
            self.length = 0
            self.__a = [Any](0)
	}
	
	
	public static <X> haxe.root.Array<X?> ofNative(Array<X> _native)
	{
		
            var ret = _native
            return ret        
	
	}
	
	
	public static <Y> haxe.root.Array<Y?> alloc(Int size)
	{
		
			return [Y](size)
	
	}
	
	
	public Int length
	
	public Array<T> __a
	
	public final haxe.root.Array<T?> concat(haxe.root.Array<T?> a)
	{
		return Array<T>.self.init(self.__a + a.__a)
	}
	
	
	public final String? join(String? sep)
	{
		return self.__a.map(String.init).joined(separator: sep)
	}
	
	
	public final Any? pop()
	{
		var ret : T? = (self.length > 0 ? self.__a.removeLast(): nil)
                    self.length = self.__a.count
                    return ret
	}
	
	
	public final Int push(T x)
	{
		self.__a.append(x)
                    self.length = self.__a.count
                    return self.length
	}
	
	
	public final reverse()
	{
		self.__a = self.__a.reverse()
	}
	
	
	public final Any? shift()
	{
		var ret : T? = (self.length > 0 ? self.__a.removeFirst(): nil)
                    self.length = self.__a.count
                    return ret
	}
	
	
	public final haxe.root.Array<T?> slice(Int pos, Any? end)
	{
		
        if (pos < 0) 
        {
            pos = self.length + pos
            if (pos < 0)
            {
                pos = 0
            }    
        }
        if (end == nil)
        {
            end = self.length
        }
        else if (end < 0)
        {
            end = self.length + end
        }
        
        if(end > self.length)
        {
            end = self.length
        }
        
        var len = end - pos
        if (len <= 0)
        {
            return Array<T>.self.init()
        }

        var slice : ArraySlice<T> = self.__a[pos...(end-1)] 
        return Array(slice)
    
	}
	
	
	public final sort([ !TypeError Array.T -> Array.T -> Int ] f)
	{
		
        self.__a.sort { f($0, $1) > 0 }
        
	}
	
	
	public final haxe.root.Array<T?> splice(Int pos, Int len)
	{
		//line 150 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( len < 0 )) 
		{
			//line 150 "/home/ron/haxe/std/swift/_std/Array.hx"
			return new haxe.root.Array<T?>()
		}
		
		//line 151 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( pos < 0 )) 
		{
			//line 152 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = ( this.length + pos )
			//line 153 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( pos < 0 )) 
			{
				//line 153 "/home/ron/haxe/std/swift/_std/Array.hx"
				pos = 0
			}
			
		}
		
		//line 155 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( pos > this.length )) 
		{
			//line 156 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = 0
			//line 157 "/home/ron/haxe/std/swift/_std/Array.hx"
			len = 0
		}
		else
		{
			//line 158 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( ( pos + len ) > this.length )) 
			{
				//line 159 "/home/ron/haxe/std/swift/_std/Array.hx"
				len = ( this.length - pos )
				//line 160 "/home/ron/haxe/std/swift/_std/Array.hx"
				if (( len < 0 )) 
				{
					//line 160 "/home/ron/haxe/std/swift/_std/Array.hx"
					len = 0
				}
				
			}
			
		}
		
		//line 162 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> a = this.__a
		//line 166 "/home/ron/haxe/std/swift/_std/Array.hx"
		haxe.root.Array<T?> ret = haxe.root.Array.ofNative(new T[len])
		//line 170 "/home/ron/haxe/std/swift/_std/Array.hx"
		this.length -= len
		//line 171 "/home/ron/haxe/std/swift/_std/Array.hx"
		while ((  -- len >= 0 ))
		{
			//line 172 "/home/ron/haxe/std/swift/_std/Array.hx"
			a[( this.length + len )] = nil
		}
		
		//line 173 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret
	}
	
	
	public final spliceVoid(Int pos, Int len)
	{
		//line 178 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( len < 0 )) 
		{
			//line 178 "/home/ron/haxe/std/swift/_std/Array.hx"
			return 
		}
		
		//line 179 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( pos < 0 )) 
		{
			//line 180 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = ( this.length + pos )
			//line 181 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( pos < 0 )) 
			{
				//line 181 "/home/ron/haxe/std/swift/_std/Array.hx"
				pos = 0
			}
			
		}
		
		//line 183 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( pos > this.length )) 
		{
			//line 184 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = 0
			//line 185 "/home/ron/haxe/std/swift/_std/Array.hx"
			len = 0
		}
		else
		{
			//line 186 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( ( pos + len ) > this.length )) 
			{
				//line 187 "/home/ron/haxe/std/swift/_std/Array.hx"
				len = ( this.length - pos )
				//line 188 "/home/ron/haxe/std/swift/_std/Array.hx"
				if (( len < 0 )) 
				{
					//line 188 "/home/ron/haxe/std/swift/_std/Array.hx"
					len = 0
				}
				
			}
			
		}
		
		//line 190 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> a = this.__a
		//line 194 "/home/ron/haxe/std/swift/_std/Array.hx"
		this.length -= len
		//line 195 "/home/ron/haxe/std/swift/_std/Array.hx"
		while ((  -- len >= 0 ))
		{
			//line 196 "/home/ron/haxe/std/swift/_std/Array.hx"
			a[( this.length + len )] = nil
		}
		
	}
	
	
	@Override public String? toString()
	{
		//line 201 "/home/ron/haxe/std/swift/_std/Array.hx"
		haxe.root.StringBuf ret = new haxe.root.StringBuf()
		//line 202 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> a = this.__a
		//line 203 "/home/ron/haxe/std/swift/_std/Array.hx"
		ret.add("[")
		//line 204 "/home/ron/haxe/std/swift/_std/Array.hx"
		Bool first = true
		//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
		{
			//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
			Int _g1 = 0
			//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
			Int _g = this.length
			//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
			while (( _g1 < _g ))
			{
				//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
				Int i = _g1++
				//line 207 "/home/ron/haxe/std/swift/_std/Array.hx"
				if (first) 
				{
					//line 208 "/home/ron/haxe/std/swift/_std/Array.hx"
					first = false
				}
				else
				{
					//line 210 "/home/ron/haxe/std/swift/_std/Array.hx"
					ret.add(",")
				}
				
				//line 211 "/home/ron/haxe/std/swift/_std/Array.hx"
				ret.add(a[i])
			}
			
		}
		
		//line 214 "/home/ron/haxe/std/swift/_std/Array.hx"
		ret.add("]")
		//line 215 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret.toString()
	}
	
	
	public final unshift(T x)
	{
		//line 221 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int length = this.length
		//line 222 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( length >= this.__a.get_length() )) 
		{
			//line 228 "/home/ron/haxe/std/swift/_std/Array.hx"
			this.__a = new T[( (( length << 1 )) + 1 )]
		}
		
		//line 233 "/home/ron/haxe/std/swift/_std/Array.hx"
		this.__a[0] = x
		//line 234 "/home/ron/haxe/std/swift/_std/Array.hx"
		 ++ this.length
	}
	
	
	public final insert(Int pos, T x)
	{
		//line 239 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int l = this.length
		//line 240 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( pos < 0 )) 
		{
			//line 241 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = ( l + pos )
			//line 242 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( pos < 0 )) 
			{
				//line 242 "/home/ron/haxe/std/swift/_std/Array.hx"
				pos = 0
			}
			
		}
		
		//line 244 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( pos >= l )) 
		{
			//line 245 "/home/ron/haxe/std/swift/_std/Array.hx"
			this.push(x)
			//line 246 "/home/ron/haxe/std/swift/_std/Array.hx"
			return 
		}
		else
		{
			//line 247 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( pos == 0 )) 
			{
				//line 248 "/home/ron/haxe/std/swift/_std/Array.hx"
				this.unshift(x)
				//line 249 "/home/ron/haxe/std/swift/_std/Array.hx"
				return 
			}
			
		}
		
		//line 252 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( l >= this.__a.get_length() )) 
		{
			//line 255 "/home/ron/haxe/std/swift/_std/Array.hx"
			Array<T> newarr = new T[( (( this.length << 1 )) + 1 )]
			//line 257 "/home/ron/haxe/std/swift/_std/Array.hx"
			newarr[pos] = x
			//line 260 "/home/ron/haxe/std/swift/_std/Array.hx"
			this.__a = newarr
			//line 261 "/home/ron/haxe/std/swift/_std/Array.hx"
			 ++ this.length
		}
		else
		{
			//line 266 "/home/ron/haxe/std/swift/_std/Array.hx"
			this.__a[pos] = x
			//line 267 "/home/ron/haxe/std/swift/_std/Array.hx"
			 ++ this.length
		}
		
	}
	
	
	public final Bool remove(T x)
	{
		//line 273 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> __a = this.__a
		//line 274 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int i = -1
		//line 275 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int length = this.length
		//line 276 "/home/ron/haxe/std/swift/_std/Array.hx"
		while ((  ++ i < length ))
		{
			//line 278 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( __a[i] == x )) 
			{
				//line 281 "/home/ron/haxe/std/swift/_std/Array.hx"
				__a[ -- this.length] = nil
				//line 283 "/home/ron/haxe/std/swift/_std/Array.hx"
				return true
			}
			
		}
		
		//line 287 "/home/ron/haxe/std/swift/_std/Array.hx"
		return false
	}
	
	
	public final Int indexOf(T x, Any? fromIndex)
	{
		//line 291 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int len = this.length
		//line 291 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> a = this.__a
		//line 291 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int i = ( (( fromIndex == nil )) ? (0) : (fromIndex) )
		//line 292 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( i < 0 )) 
		{
			//line 294 "/home/ron/haxe/std/swift/_std/Array.hx"
			i += len
			//line 295 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( i < 0 )) 
			{
				//line 295 "/home/ron/haxe/std/swift/_std/Array.hx"
				i = 0
			}
			
		}
		
		//line 297 "/home/ron/haxe/std/swift/_std/Array.hx"
		while (( i < len ))
		{
			//line 299 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( a[i] == x )) 
			{
				//line 300 "/home/ron/haxe/std/swift/_std/Array.hx"
				return i
			}
			
			//line 301 "/home/ron/haxe/std/swift/_std/Array.hx"
			 ++ i
		}
		
		//line 303 "/home/ron/haxe/std/swift/_std/Array.hx"
		return -1
	}
	
	
	public final Int lastIndexOf(T x, Any? fromIndex)
	{
		//line 307 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int len = this.length
		//line 307 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> a = this.__a
		//line 307 "/home/ron/haxe/std/swift/_std/Array.hx"
		Int i = ( (( fromIndex == nil )) ? (( len - 1 )) : (fromIndex) )
		//line 308 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( i >= len )) 
		{
			//line 309 "/home/ron/haxe/std/swift/_std/Array.hx"
			i = ( len - 1 )
		}
		else
		{
			//line 310 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( i < 0 )) 
			{
				//line 311 "/home/ron/haxe/std/swift/_std/Array.hx"
				i += len
			}
			
		}
		
		//line 312 "/home/ron/haxe/std/swift/_std/Array.hx"
		while (( i >= 0 ))
		{
			//line 314 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( a[i] == x )) 
			{
				//line 315 "/home/ron/haxe/std/swift/_std/Array.hx"
				return i
			}
			
			//line 316 "/home/ron/haxe/std/swift/_std/Array.hx"
			 -- i
		}
		
		//line 318 "/home/ron/haxe/std/swift/_std/Array.hx"
		return -1
	}
	
	
	public final haxe.root.Array<T?> copy()
	{
		//line 327 "/home/ron/haxe/std/swift/_std/Array.hx"
		return haxe.root.Array.ofNative(new T[this.length])
	}
	
	
	public final Any? iterator()
	{
		//line 332 "/home/ron/haxe/std/swift/_std/Array.hx"
		return new _Array.ArrayIterator<T?>(this)
	}
	
	
	public final <S> haxe.root.Array<S?> map([ !TypeError Array.T -> map.S ] f)
	{
		//line 336 "/home/ron/haxe/std/swift/_std/Array.hx"
		haxe.root.Array<S?> ret = new haxe.root.Array<S?>(( (Array<S>) (new Array<Any?> {}) ))
		//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
		{
			//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
			Int _g = 0
			//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
			haxe.root.Array<T?> _g1 = this
			//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
			while (( _g < _g1.length ))
			{
				//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
				T elt = _g1[_g]
				//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
				 ++ _g
				//line 338 "/home/ron/haxe/std/swift/_std/Array.hx"
				ret.push(f(elt))
			}
			
		}
		
		//line 339 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret
	}
	
	
	public final haxe.root.Array<T?> filter([ !TypeError Array.T -> Bool ] f)
	{
		//line 343 "/home/ron/haxe/std/swift/_std/Array.hx"
		haxe.root.Array<T?> ret = new haxe.root.Array<T?>(( (Array<T>) (new Array<Any?> {}) ))
		//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
		{
			//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
			Int _g = 0
			//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
			haxe.root.Array<T?> _g1 = this
			//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
			while (( _g < _g1.length ))
			{
				//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
				T elt = _g1[_g]
				//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
				 ++ _g
				//line 345 "/home/ron/haxe/std/swift/_std/Array.hx"
				if (f(elt)) 
				{
					//line 346 "/home/ron/haxe/std/swift/_std/Array.hx"
					ret.push(elt)
				}
				
			}
			
		}
		
		//line 347 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret
	}
	
	
	public final T __get(Int idx)
	{
		//line 352 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> __a = this.__a
		//line 353 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( ( idx >= __a.get_length() ) || ( idx < 0 ) )) 
		{
			//line 354 "/home/ron/haxe/std/swift/_std/Array.hx"
			return nil
		}
		
		//line 356 "/home/ron/haxe/std/swift/_std/Array.hx"
		return __a[idx]
	}
	
	
	public final T __set(Int idx, T v)
	{
		//line 361 "/home/ron/haxe/std/swift/_std/Array.hx"
		Array<T> __a = this.__a
		//line 362 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( idx >= __a.get_length() )) 
		{
			//line 364 "/home/ron/haxe/std/swift/_std/Array.hx"
			Int newl = ( idx + 1 )
			//line 365 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( idx == __a.get_length() )) 
			{
				//line 366 "/home/ron/haxe/std/swift/_std/Array.hx"
				newl = ( (( idx << 1 )) + 1 )
			}
			
			//line 367 "/home/ron/haxe/std/swift/_std/Array.hx"
			Array<T> newArr = new T[newl]
			//line 368 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (( this.length > 0 )) 
			{
				//line 370 "/home/ron/haxe/std/swift/_std/Array.hx"
				__a = newArr
				//line 370 "/home/ron/haxe/std/swift/_std/Array.hx"
				this.__a = newArr
			}
			
		}
		
		//line 373 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (( idx >= this.length )) 
		{
			//line 374 "/home/ron/haxe/std/swift/_std/Array.hx"
			this.length = ( idx + 1 )
		}
		
		//line 376 "/home/ron/haxe/std/swift/_std/Array.hx"
		return __a[idx] = v
	}
	
	
	public final T __unsafe_get(Int idx)
	{
		//line 381 "/home/ron/haxe/std/swift/_std/Array.hx"
		return this.__a[idx]
	}
	
	
	public final T __unsafe_set(Int idx, T val)
	{
		//line 386 "/home/ron/haxe/std/swift/_std/Array.hx"
		return this.__a[idx] = val
	}
	
	
}


