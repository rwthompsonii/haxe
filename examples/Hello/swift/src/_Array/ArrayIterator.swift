// Generated by Haxe 3.3.0
package _Array;

import haxe.root.*;

public final class ArrayIterator<T> : haxe.lang.HxObject
{
	public init(a : haxe.root.Array<T?>) ->  Void
	{
		//line 399 "/home/ron/haxe/std/swift/_std/Array.hx"
		this!.arr = a
		//line 400 "/home/ron/haxe/std/swift/_std/Array.hx"
		this!.len = a!.length
		//line 401 "/home/ron/haxe/std/swift/_std/Array.hx"
		this!.i = 0
	}
	
	
	public dynamic func arr haxe.root.Array<T?>
	
	public dynamic func len Int
	
	public dynamic func i Int
	
	public final func hasNext() ->  Bool
	{
		//line 404 "/home/ron/haxe/std/swift/_std/Array.hx"
		return (this!.i < this!.len)
	}
	
	
	public final func next() ->  T
	{
		//line 405 "/home/ron/haxe/std/swift/_std/Array.hx"
		return this!.arr!.__get(this!.i++)
	}
	
	
	public override func __hx_setField_f(field : String?, value : Double, handleProperties : Bool) ->  Double
	{
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "i":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.i = (value) as Int
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			case "len":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.len = (value) as Int
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			default:
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_setField_f(field, value, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_setField(field : String?, value : Any?, handleProperties : Bool) ->  Any?
	{
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "i":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.i = (value) as Int
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			case "len":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.len = (value) as Int
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			case "arr":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.arr = (value) as haxe.root.Array<T?>
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			default:
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_setField(field, value, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_getField(field : String?, throwErrors : Bool, isCheck : Bool, handleProperties : Bool) ->  Any?
	{
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "next":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.next
			}
			
			
			case "hasNext":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.hasNext
			}
			
			
			case "i":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.i
			}
			
			
			case "len":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.len
			}
			
			
			case "arr":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.arr
			}
			
			
			default:
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_getField(field, throwErrors, isCheck, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_getField_f(field : String?, throwErrors : Bool, handleProperties : Bool) ->  Double
	{
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "i":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.i
			}
			
			
			case "len":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.len
			}
			
			
			default:
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_getField_f(field, throwErrors, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_invokeField(field : String?, dynargs : haxe.root.Array) ->  Any?
	{
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "next":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.next()
			}
			
			
			case "hasNext":
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.hasNext()
			}
			
			
			default:
			{
				//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_invokeField(field, dynargs)
			}
			
		}
		
	}
	
	
	public override func __hx_getFields(baseArr : haxe.root.Array<String??>) ->  Void
	{
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		baseArr!.push("i")
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		baseArr!.push("len")
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		baseArr!.push("arr")
		//line 391 "/home/ron/haxe/std/swift/_std/Array.hx"
		super!.__hx_getFields(baseArr)
	}
	
	
}


