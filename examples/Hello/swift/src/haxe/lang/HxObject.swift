// Generated by Haxe 3.3.0
package haxe.lang;

import haxe.root.*;

public class HxObject : , haxe.lang.IHxObject
{
	public func __hx_deleteField(field : String?) ->  Bool
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		return false
	}
	
	
	public func __hx_lookupField(field : String?, throwErrors : Bool, isCheck : Bool) ->  Any?
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		if (isCheck) 
		{
			//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
			return __undefined__
		}
		else
		{
			//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
			if (throwErrors) 
			{
				//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
				throw "Field not found."
			}
			else
			{
				//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
				return nil
			}
			
		}
		
	}
	
	
	public func __hx_lookupField_f(field : String?, throwErrors : Bool) ->  Double
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		if (throwErrors) 
		{
			//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
			throw "Field not found or incompatible field type."
		}
		else
		{
			//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
			return 0.0
		}
		
	}
	
	
	public func __hx_lookupSetField(field : String?, value : Any?) ->  Any?
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		throw "Cannot access field for writing."
	}
	
	
	public func __hx_lookupSetField_f(field : String?, value : Double) ->  Double
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		throw "Cannot access field for writing or incompatible type."
	}
	
	
	public func __hx_setField_f(field : String?, value : Double, handleProperties : Bool) ->  Double
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		switch (field)
		{
			default:
			{
				//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
				return this!.__hx_lookupSetField_f(field, value)
			}
			
		}
		
	}
	
	
	public func __hx_setField(field : String?, value : Any?, handleProperties : Bool) ->  Any?
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		switch (field)
		{
			default:
			{
				//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
				return this!.__hx_lookupSetField(field, value)
			}
			
		}
		
	}
	
	
	public func __hx_getField(field : String?, throwErrors : Bool, isCheck : Bool, handleProperties : Bool) ->  Any?
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		switch (field)
		{
			default:
			{
				//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
				return this!.__hx_lookupField(field, throwErrors, isCheck)
			}
			
		}
		
	}
	
	
	public func __hx_getField_f(field : String?, throwErrors : Bool, handleProperties : Bool) ->  Double
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		switch (field)
		{
			default:
			{
				//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
				return this!.__hx_lookupField_f(field, throwErrors)
			}
			
		}
		
	}
	
	
	public func __hx_invokeField(field : String?, dynargs : haxe.root.Array) ->  Any?
	{
		//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
		switch (field)
		{
			default:
			{
				//line 30 "/home/ron/haxe/std/swift/internal/HxObject.hx"
				return (this!.__hx_getField(field, true, false, false)) as haxe.lang.Function!.__hx_invokeDynamic(dynargs)
			}
			
		}
		
	}
	
	
	public func __hx_getFields(baseArr : haxe.root.Array<String??>) ->  Void
	{
	}
	
	
}


