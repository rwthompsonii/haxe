// Generated by Haxe 3.3.0
package haxe.root;

import haxe.root.*;

public final class Array<T> : haxe.lang.HxObject
{
	
	init(_native : [T])
	{
		self.__a = _native;
		self.length = _native.count;
	}
	public init() ->  Void
	{
		
            self.length = 0
            self.__a = [Any](0)
	}
	
	
	public class func ofNative <X>(_native : Array<X>) ->  haxe.root.Array<X?>
	{
		
            var ret = _native
            return ret        
	
	}
	
	
	public class func alloc <Y>(size : Int) ->  haxe.root.Array<Y?>
	{
		
			return [Y](size)
	
	}
	
	
	public dynamic func length Int
	
	public dynamic func __a Array<T>
	
	public final func concat(a : haxe.root.Array<T?>) ->  haxe.root.Array<T?>
	{
		return Array<T>.self.init(self.__a + a.__a)
	}
	
	
	public final func join(sep : String?) ->  String?
	{
		return self.__a.map(String.init).joined(separator: sep)
	}
	
	
	public final func pop() ->  Any?
	{
		var ret : T? = (self.length > 0 ? self.__a.removeLast(): nil)
                    self.length = self.__a.count
                    return ret
	}
	
	
	public final func push(x : T) ->  Int
	{
		self.__a.append(x)
                    self.length = self.__a.count
                    return self.length
	}
	
	
	public final func reverse() ->  Void
	{
		self.__a = self.__a.reverse()
	}
	
	
	public final func shift() ->  Any?
	{
		var ret : T? = (self.length > 0 ? self.__a.removeFirst(): nil)
                    self.length = self.__a.count
                    return ret
	}
	
	
	public final func slice(pos : Int, end : Any?) ->  haxe.root.Array<T?>
	{
		
        if (pos < 0) 
        {
            pos = self.length + pos
            if (pos < 0)
            {
                pos = 0
            }    
        }
        if (end == nil)
        {
            end = self.length
        }
        else if (end < 0)
        {
            end = self.length + end
        }
        
        if(end > self.length)
        {
            end = self.length
        }
        
        var len = end - pos
        if (len <= 0)
        {
            return Array<T>.self.init()
        }

        var slice : ArraySlice<T> = self.__a[pos...(end-1)] 
        return Array(slice)
    
	}
	
	
	public final func sort(f : ( T, T ) -> Int) ->  Void
	{
		
        self.__a.sort { f($0, $1) > 0 }
        
	}
	
	
	public final func splice(pos : Int, len : Int) ->  haxe.root.Array<T?>
	{
		//line 150 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((len < 0)) 
		{
			//line 150 "/home/ron/haxe/std/swift/_std/Array.hx"
			return haxe.root.Array<T?>()
		}
		
		//line 151 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((pos < 0)) 
		{
			//line 152 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = (this!.length + pos)
			//line 153 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((pos < 0)) 
			{
				//line 153 "/home/ron/haxe/std/swift/_std/Array.hx"
				pos = 0
			}
			
		}
		
		//line 155 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((pos > this!.length)) 
		{
			//line 156 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = 0
			//line 157 "/home/ron/haxe/std/swift/_std/Array.hx"
			len = 0
		}
		else
		{
			//line 158 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (((pos + len) > this!.length)) 
			{
				//line 159 "/home/ron/haxe/std/swift/_std/Array.hx"
				len = (this!.length - pos)
				//line 160 "/home/ron/haxe/std/swift/_std/Array.hx"
				if ((len < 0)) 
				{
					//line 160 "/home/ron/haxe/std/swift/_std/Array.hx"
					len = 0
				}
				
			}
			
		}
		
		//line 162 "/home/ron/haxe/std/swift/_std/Array.hx"
		var a : Array<T> = this!.__a
		//line 166 "/home/ron/haxe/std/swift/_std/Array.hx"
		var ret : haxe.root.Array<T?> = haxe.root.Array.ofNative(Array<T>)
		//line 170 "/home/ron/haxe/std/swift/_std/Array.hx"
		this!.length -= len
		//line 171 "/home/ron/haxe/std/swift/_std/Array.hx"
		while (( -- len >= 0))
		{
			//line 172 "/home/ron/haxe/std/swift/_std/Array.hx"
			a[(this!.length + len)] = nil
		}
		
		//line 173 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret
	}
	
	
	public final func spliceVoid(pos : Int, len : Int) ->  Void
	{
		//line 178 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((len < 0)) 
		{
			//line 178 "/home/ron/haxe/std/swift/_std/Array.hx"
			return 
		}
		
		//line 179 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((pos < 0)) 
		{
			//line 180 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = (this!.length + pos)
			//line 181 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((pos < 0)) 
			{
				//line 181 "/home/ron/haxe/std/swift/_std/Array.hx"
				pos = 0
			}
			
		}
		
		//line 183 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((pos > this!.length)) 
		{
			//line 184 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = 0
			//line 185 "/home/ron/haxe/std/swift/_std/Array.hx"
			len = 0
		}
		else
		{
			//line 186 "/home/ron/haxe/std/swift/_std/Array.hx"
			if (((pos + len) > this!.length)) 
			{
				//line 187 "/home/ron/haxe/std/swift/_std/Array.hx"
				len = (this!.length - pos)
				//line 188 "/home/ron/haxe/std/swift/_std/Array.hx"
				if ((len < 0)) 
				{
					//line 188 "/home/ron/haxe/std/swift/_std/Array.hx"
					len = 0
				}
				
			}
			
		}
		
		//line 190 "/home/ron/haxe/std/swift/_std/Array.hx"
		var a : Array<T> = this!.__a
		//line 194 "/home/ron/haxe/std/swift/_std/Array.hx"
		this!.length -= len
		//line 195 "/home/ron/haxe/std/swift/_std/Array.hx"
		while (( -- len >= 0))
		{
			//line 196 "/home/ron/haxe/std/swift/_std/Array.hx"
			a[(this!.length + len)] = nil
		}
		
	}
	
	
	public final func toString() ->  String?
	{
		//line 201 "/home/ron/haxe/std/swift/_std/Array.hx"
		var ret : haxe.root.StringBuf = haxe.root.StringBuf()
		//line 202 "/home/ron/haxe/std/swift/_std/Array.hx"
		var a : Array<T> = this!.__a
		//line 203 "/home/ron/haxe/std/swift/_std/Array.hx"
		ret!.add("[")
		//line 204 "/home/ron/haxe/std/swift/_std/Array.hx"
		var first : Bool = true
		//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
		{
			//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
			var _g1 : Int = 0
			//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
			var _g : Int = this!.length
			//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
			while ((_g1 < _g))
			{
				//line 205 "/home/ron/haxe/std/swift/_std/Array.hx"
				var i : Int = _g1++
				//line 207 "/home/ron/haxe/std/swift/_std/Array.hx"
				if (first) 
				{
					//line 208 "/home/ron/haxe/std/swift/_std/Array.hx"
					first = false
				}
				else
				{
					//line 210 "/home/ron/haxe/std/swift/_std/Array.hx"
					ret!.add(",")
				}
				
				//line 211 "/home/ron/haxe/std/swift/_std/Array.hx"
				ret!.add(a[i])
			}
			
		}
		
		//line 214 "/home/ron/haxe/std/swift/_std/Array.hx"
		ret!.add("]")
		//line 215 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret!.toString()
	}
	
	
	public final func unshift(x : T) ->  Void
	{
		//line 221 "/home/ron/haxe/std/swift/_std/Array.hx"
		var length : Int = this!.length
		//line 222 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((length >= this!.__a!.get_length())) 
		{
			//line 228 "/home/ron/haxe/std/swift/_std/Array.hx"
			this!.__a = Array<T>
		}
		
		//line 233 "/home/ron/haxe/std/swift/_std/Array.hx"
		this!.__a[0] = x
		//line 234 "/home/ron/haxe/std/swift/_std/Array.hx"
		 ++ this!.length
	}
	
	
	public final func insert(pos : Int, x : T) ->  Void
	{
		//line 239 "/home/ron/haxe/std/swift/_std/Array.hx"
		var l : Int = this!.length
		//line 240 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((pos < 0)) 
		{
			//line 241 "/home/ron/haxe/std/swift/_std/Array.hx"
			pos = (l + pos)
			//line 242 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((pos < 0)) 
			{
				//line 242 "/home/ron/haxe/std/swift/_std/Array.hx"
				pos = 0
			}
			
		}
		
		//line 244 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((pos >= l)) 
		{
			//line 245 "/home/ron/haxe/std/swift/_std/Array.hx"
			this!.push(x)
			//line 246 "/home/ron/haxe/std/swift/_std/Array.hx"
			return 
		}
		else
		{
			//line 247 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((pos == 0)) 
			{
				//line 248 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.unshift(x)
				//line 249 "/home/ron/haxe/std/swift/_std/Array.hx"
				return 
			}
			
		}
		
		//line 252 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((l >= this!.__a!.get_length())) 
		{
			//line 255 "/home/ron/haxe/std/swift/_std/Array.hx"
			var newarr : Array<T> = Array<T>
			//line 257 "/home/ron/haxe/std/swift/_std/Array.hx"
			newarr[pos] = x
			//line 260 "/home/ron/haxe/std/swift/_std/Array.hx"
			this!.__a = newarr
			//line 261 "/home/ron/haxe/std/swift/_std/Array.hx"
			 ++ this!.length
		}
		else
		{
			//line 266 "/home/ron/haxe/std/swift/_std/Array.hx"
			this!.__a[pos] = x
			//line 267 "/home/ron/haxe/std/swift/_std/Array.hx"
			 ++ this!.length
		}
		
	}
	
	
	public final func remove(x : T) ->  Bool
	{
		//line 273 "/home/ron/haxe/std/swift/_std/Array.hx"
		var __a : Array<T> = this!.__a
		//line 274 "/home/ron/haxe/std/swift/_std/Array.hx"
		var i : Int = -1
		//line 275 "/home/ron/haxe/std/swift/_std/Array.hx"
		var length : Int = this!.length
		//line 276 "/home/ron/haxe/std/swift/_std/Array.hx"
		while (( ++ i < length))
		{
			//line 278 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((__a[i] == x)) 
			{
				//line 281 "/home/ron/haxe/std/swift/_std/Array.hx"
				__a[ -- this!.length] = nil
				//line 283 "/home/ron/haxe/std/swift/_std/Array.hx"
				return true
			}
			
		}
		
		//line 287 "/home/ron/haxe/std/swift/_std/Array.hx"
		return false
	}
	
	
	public final func indexOf(x : T, fromIndex : Any?) ->  Int
	{
		//line 291 "/home/ron/haxe/std/swift/_std/Array.hx"
		var len : Int = this!.length
		//line 291 "/home/ron/haxe/std/swift/_std/Array.hx"
		var a : Array<T> = this!.__a
		//line 291 "/home/ron/haxe/std/swift/_std/Array.hx"
		var i : Int = ( ((fromIndex == nil)) ? (0) : (fromIndex) )
		//line 292 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((i < 0)) 
		{
			//line 294 "/home/ron/haxe/std/swift/_std/Array.hx"
			i += len
			//line 295 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((i < 0)) 
			{
				//line 295 "/home/ron/haxe/std/swift/_std/Array.hx"
				i = 0
			}
			
		}
		
		//line 297 "/home/ron/haxe/std/swift/_std/Array.hx"
		while ((i < len))
		{
			//line 299 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((a[i] == x)) 
			{
				//line 300 "/home/ron/haxe/std/swift/_std/Array.hx"
				return i
			}
			
			//line 301 "/home/ron/haxe/std/swift/_std/Array.hx"
			 ++ i
		}
		
		//line 303 "/home/ron/haxe/std/swift/_std/Array.hx"
		return -1
	}
	
	
	public final func lastIndexOf(x : T, fromIndex : Any?) ->  Int
	{
		//line 307 "/home/ron/haxe/std/swift/_std/Array.hx"
		var len : Int = this!.length
		//line 307 "/home/ron/haxe/std/swift/_std/Array.hx"
		var a : Array<T> = this!.__a
		//line 307 "/home/ron/haxe/std/swift/_std/Array.hx"
		var i : Int = ( ((fromIndex == nil)) ? ((len - 1)) : (fromIndex) )
		//line 308 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((i >= len)) 
		{
			//line 309 "/home/ron/haxe/std/swift/_std/Array.hx"
			i = (len - 1)
		}
		else
		{
			//line 310 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((i < 0)) 
			{
				//line 311 "/home/ron/haxe/std/swift/_std/Array.hx"
				i += len
			}
			
		}
		
		//line 312 "/home/ron/haxe/std/swift/_std/Array.hx"
		while ((i >= 0))
		{
			//line 314 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((a[i] == x)) 
			{
				//line 315 "/home/ron/haxe/std/swift/_std/Array.hx"
				return i
			}
			
			//line 316 "/home/ron/haxe/std/swift/_std/Array.hx"
			 -- i
		}
		
		//line 318 "/home/ron/haxe/std/swift/_std/Array.hx"
		return -1
	}
	
	
	public final func copy() ->  haxe.root.Array<T?>
	{
		//line 327 "/home/ron/haxe/std/swift/_std/Array.hx"
		return haxe.root.Array.ofNative(Array<T>)
	}
	
	
	public final func iterator() ->  Any?
	{
		//line 332 "/home/ron/haxe/std/swift/_std/Array.hx"
		return _Array.ArrayIterator<T?>(this)
	}
	
	
	public final func map <S>(f : ( T ) -> S) ->  haxe.root.Array<S?>
	{
		//line 336 "/home/ron/haxe/std/swift/_std/Array.hx"
		var ret : haxe.root.Array<S?> = haxe.root.Array<S?>([])
		//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
		{
			//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
			var _g : Int = 0
			//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
			var _g1 : haxe.root.Array<T?> = this
			//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
			while ((_g < _g1!.length))
			{
				//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
				var elt : T = _g1!.__get(_g)
				//line 337 "/home/ron/haxe/std/swift/_std/Array.hx"
				 ++ _g
				//line 338 "/home/ron/haxe/std/swift/_std/Array.hx"
				ret!.push(f(elt))
			}
			
		}
		
		//line 339 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret
	}
	
	
	public final func filter(f : ( T ) -> Bool) ->  haxe.root.Array<T?>
	{
		//line 343 "/home/ron/haxe/std/swift/_std/Array.hx"
		var ret : haxe.root.Array<T?> = haxe.root.Array<T?>([])
		//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
		{
			//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
			var _g : Int = 0
			//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
			var _g1 : haxe.root.Array<T?> = this
			//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
			while ((_g < _g1!.length))
			{
				//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
				var elt : T = _g1!.__get(_g)
				//line 344 "/home/ron/haxe/std/swift/_std/Array.hx"
				 ++ _g
				//line 345 "/home/ron/haxe/std/swift/_std/Array.hx"
				if (f(elt)) 
				{
					//line 346 "/home/ron/haxe/std/swift/_std/Array.hx"
					ret!.push(elt)
				}
				
			}
			
		}
		
		//line 347 "/home/ron/haxe/std/swift/_std/Array.hx"
		return ret
	}
	
	
	public final func __get(idx : Int) ->  T
	{
		//line 352 "/home/ron/haxe/std/swift/_std/Array.hx"
		var __a : Array<T> = this!.__a
		//line 353 "/home/ron/haxe/std/swift/_std/Array.hx"
		if (((idx >= __a!.get_length()) || (idx < 0))) 
		{
			//line 354 "/home/ron/haxe/std/swift/_std/Array.hx"
			return nil
		}
		
		//line 356 "/home/ron/haxe/std/swift/_std/Array.hx"
		return __a[idx]
	}
	
	
	public final func __set(idx : Int, v : T) ->  T
	{
		//line 361 "/home/ron/haxe/std/swift/_std/Array.hx"
		var __a : Array<T> = this!.__a
		//line 362 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((idx >= __a!.get_length())) 
		{
			//line 364 "/home/ron/haxe/std/swift/_std/Array.hx"
			var newl : Int = (idx + 1)
			//line 365 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((idx == __a!.get_length())) 
			{
				//line 366 "/home/ron/haxe/std/swift/_std/Array.hx"
				newl = (((idx << 1)) + 1)
			}
			
			//line 367 "/home/ron/haxe/std/swift/_std/Array.hx"
			var newArr : Array<T> = Array<T>
			//line 368 "/home/ron/haxe/std/swift/_std/Array.hx"
			if ((this!.length > 0)) 
			{
				//line 370 "/home/ron/haxe/std/swift/_std/Array.hx"
				__a = newArr
				//line 370 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.__a = newArr
			}
			
		}
		
		//line 373 "/home/ron/haxe/std/swift/_std/Array.hx"
		if ((idx >= this!.length)) 
		{
			//line 374 "/home/ron/haxe/std/swift/_std/Array.hx"
			this!.length = (idx + 1)
		}
		
		//line 376 "/home/ron/haxe/std/swift/_std/Array.hx"
		return __a[idx] = v
	}
	
	
	public final func __unsafe_get(idx : Int) ->  T
	{
		//line 381 "/home/ron/haxe/std/swift/_std/Array.hx"
		return this!.__a[idx]
	}
	
	
	public final func __unsafe_set(idx : Int, val : T) ->  T
	{
		//line 386 "/home/ron/haxe/std/swift/_std/Array.hx"
		return this!.__a[idx] = val
	}
	
	
	public override func __hx_setField_f(field : String?, value : Double, handleProperties : Bool) ->  Double
	{
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "length":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.length = (value) as Int
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			default:
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_setField_f(field, value, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_setField(field : String?, value : Any?, handleProperties : Bool) ->  Any?
	{
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "__a":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.__a = (value) as Array<T>
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			case "length":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.length = (value) as Int
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return value
			}
			
			
			default:
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_setField(field, value, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_getField(field : String?, throwErrors : Bool, isCheck : Bool, handleProperties : Bool) ->  Any?
	{
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "__unsafe_set":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__unsafe_set
			}
			
			
			case "__unsafe_get":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__unsafe_get
			}
			
			
			case "__set":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__set
			}
			
			
			case "__get":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__get
			}
			
			
			case "filter":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.filter
			}
			
			
			case "map":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.map
			}
			
			
			case "iterator":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.iterator
			}
			
			
			case "copy":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.copy
			}
			
			
			case "lastIndexOf":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.lastIndexOf
			}
			
			
			case "indexOf":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.indexOf
			}
			
			
			case "remove":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.remove
			}
			
			
			case "insert":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.insert
			}
			
			
			case "unshift":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.unshift
			}
			
			
			case "toString":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.toString
			}
			
			
			case "spliceVoid":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.spliceVoid
			}
			
			
			case "splice":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.splice
			}
			
			
			case "sort":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.sort
			}
			
			
			case "slice":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.slice
			}
			
			
			case "shift":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.shift
			}
			
			
			case "reverse":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.reverse
			}
			
			
			case "push":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.push
			}
			
			
			case "pop":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.pop
			}
			
			
			case "join":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.join
			}
			
			
			case "concat":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.concat
			}
			
			
			case "__a":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__a
			}
			
			
			case "length":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.length
			}
			
			
			default:
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_getField(field, throwErrors, isCheck, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_getField_f(field : String?, throwErrors : Bool, handleProperties : Bool) ->  Double
	{
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "length":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.length
			}
			
			
			default:
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_getField_f(field, throwErrors, handleProperties)
			}
			
		}
		
	}
	
	
	public override func __hx_invokeField(field : String?, dynargs : haxe.root.Array) ->  Any?
	{
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		switch (field)
		{
			case "__unsafe_set":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__unsafe_set(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "__unsafe_get":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__unsafe_get(dynargs!.__get(0))
			}
			
			
			case "__set":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__set(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "__get":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.__get(dynargs!.__get(0))
			}
			
			
			case "filter":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.filter(dynargs!.__get(0))
			}
			
			
			case "map":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.map(dynargs!.__get(0))
			}
			
			
			case "iterator":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.iterator()
			}
			
			
			case "copy":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.copy()
			}
			
			
			case "lastIndexOf":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.lastIndexOf(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "indexOf":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.indexOf(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "remove":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.remove(dynargs!.__get(0))
			}
			
			
			case "insert":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.insert(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "unshift":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.unshift(dynargs!.__get(0))
			}
			
			
			case "toString":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.toString()
			}
			
			
			case "spliceVoid":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.spliceVoid(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "splice":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.splice(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "sort":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.sort(dynargs!.__get(0))
			}
			
			
			case "slice":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.slice(dynargs!.__get(0), dynargs!.__get(1))
			}
			
			
			case "shift":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.shift()
			}
			
			
			case "reverse":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				this!.reverse()
			}
			
			
			case "push":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.push(dynargs!.__get(0))
			}
			
			
			case "pop":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.pop()
			}
			
			
			case "join":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.join(dynargs!.__get(0))
			}
			
			
			case "concat":
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return this!.concat(dynargs!.__get(0))
			}
			
			
			default:
			{
				//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
				return super!.__hx_invokeField(field, dynargs)
			}
			
		}
		
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		return nil
	}
	
	
	public override func __hx_getFields(baseArr : haxe.root.Array<String??>) ->  Void
	{
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		baseArr!.push("__a")
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		baseArr!.push("length")
		//line 32 "/home/ron/haxe/std/swift/_std/Array.hx"
		super!.__hx_getFields(baseArr)
	}
	
	
}


